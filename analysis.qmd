---
title: "Analysis"
author: "Your Name"
date: "`r Sys.Date()`"
format: 
    html:
        toc: true
        toc-depth: 2
        code-fold: true
        number-sections: true
editor: visual
---

```{r}
library(readxl)
library(gt)

data = read_excel("data.xlsx")
colnames(data)
```

```{r}
corstars <- function(x, round_digits = 2, use = "pairwise.complete.obs") {
  require(Hmisc)
  
  # Compute correlation matrix with p-values
  rcorr_res <- Hmisc::rcorr(as.matrix(x), type = "pearson")
  r <- rcorr_res$r
  p <- rcorr_res$P
  
  # Create significance stars
  stars <- ifelse(p < 0.001, "***", 
           ifelse(p < 0.01, "**", 
           ifelse(p < 0.05, "*", "")))
  
  # Combine correlations and stars
  r_stars <- matrix(paste0(formatC(r, format = "f", digits = round_digits), stars), 
                    nrow = nrow(r))
  rownames(r_stars) <- colnames(x)
  colnames(r_stars) <- colnames(x)
  
  # Set diagonal to 1.00 without NA or stars
  diag(r_stars) <- formatC(1, format = "f", digits = round_digits) # Explicitly set diagonal to 1.00 without NA or stars
  
  # Means and SDs
  means <- sapply(x, function(i) mean(i, na.rm = TRUE))
  sds <- sapply(x, function(i) sd(i, na.rm = TRUE))
  
  result <- as.data.frame(r_stars)
  result <- tibble::rownames_to_column(result, var = "Variable")
  result <- dplyr::left_join(
    tibble::tibble(Variable = names(means),
                   Mean = formatC(means, digits = round_digits, format = "f"),
                   SD = formatC(sds, digits = round_digits, format = "f")),
    result,
    by = "Variable"
  )
  
  return(result)
}
```

# Limpieza de datos

```{r}
data = data %>% 
    mutate(
        sexo = ifelse(sexo == "Prefiero no decir", NA, sexo),
        estado_civil = ifelse(estado_civil == "NA", NA, estado_civil),
        estado_civil = ifelse(estado_civil == 'Soltero/a', "Soltero/a", "No Soltero"),
        grupo_carrera = ifelse(grupo_carrera == "NA", NA, grupo_carrera),
        promedio = parse_number(promedio),
        nse = ifelse(nse == 'Bajo', "Bajo", "Medio/Alto"),
        ed_padre = ifelse(ed_padre == "NA", NA, ed_padre),
        ed_madre = ifelse(ed_madre == "NA", NA, ed_madre),
        universidad = ifelse(universidad == "NA", NA, universidad),
        ed_padre = ifelse(ed_padre == "sin educacion", "secundaria", ed_padre),
        ed_madre = ifelse(ed_madre == "sin educacion", "secundaria", ed_madre),
        ed_padre = ifelse(ed_padre == "secundaria", "secundaria o menos", ed_padre),
        ed_madre = ifelse(ed_madre == "secundaria", "secundaria o menos", ed_madre)
        ) %>%
    mutate_at(vars(desercion, habilidades_sociales:metas), parse_number)
totales = data %>% select(sexo:tipo_universidad, desercion, habilidades_sociales:metas)
```

He agrupado algunos datos, porque los tamaños de la muestra en cada subgrupo son muy pequeños. Cuando no se usan para el analisis, los he mantenido (e.g., `vive_con`, `situacion_laboral_padres`).

# Datos para metodo

Aquí están las tablas con promedios, SD, minimo y maximo para las variables numericas (promedio y edad).

Para las demas variables están los conteos.

```{r}
library(tableone)
vars <- c("sexo", "edad", "estado_civil", "universidad", "grupo_carrera", "ciclo",
          "promedio", "nse", "roles", "vive_con", "ed_padre", "ed_madre",
          "sit_laboral_padres", "region", "tipo_universidad")
cat_vars <- c("sexo", "estado_civil", "universidad", "grupo_carrera", "ciclo",
              "nse", "roles", "vive_con", "ed_padre", "ed_madre",
              "sit_laboral_padres", "region", "tipo_universidad")

cont_vars <- c("edad", "promedio")
table1 <- CreateTableOne(vars = vars, data = totales, factorVars = cat_vars)

print(table1, showAllLevels = TRUE, formatOptions = list(big.mark = ","))
```

# Missing data

Vamos a hacer listwise deletion. Voy a seleccionar todas las variables que entran al analisis, y nos quedamos unicamente con los datos completos.

Las variables demograficas que quedan son: `sexo`    `edad` `estado_civil` `grupo_carrera`  `nse`        `ed_padre`     `ed_madre` `region` `tipo_universidad`

```{r}
totales2 = totales %>% select(-universidad, -ciclo, -roles, -vive_con, -sit_laboral_padres) %>% drop_na()

totales2 = totales2 %>% left_join(totales)
totales = totales2

```

# Descriptivos de la gente que entro en la muestra

```{r}
library(tableone)
vars <- c("sexo", "edad", "estado_civil", "universidad", "grupo_carrera", "ciclo",
          "promedio", "nse", "roles", "vive_con", "ed_padre", "ed_madre",
          "sit_laboral_padres", "region", "tipo_universidad")
cat_vars <- c("sexo", "estado_civil", "universidad", "grupo_carrera", "ciclo",
              "nse", "roles", "vive_con", "ed_padre", "ed_madre",
              "sit_laboral_padres", "region", "tipo_universidad")

cont_vars <- c("edad", "promedio")
table1 <- CreateTableOne(vars = vars, data = totales, factorVars = cat_vars)

print(table1, showAllLevels = TRUE, formatOptions = list(big.mark = ","))
```

# Correlations

```{r}
totales %>% select(edad, promedio, desercion:metas) %>% corstars() %>% gt()
```

# Proposed Model

```{r}
library(lavaan)
model <- '
  # Direct effects
  metas ~ habilidades_sociales + soporte_social
  planear ~ metas + habilidades_sociales + soporte_social + promedio
  desercion ~ planear + promedio
'

fit <- sem(model, data = totales, estimator = "ML", missing = "listwise")

summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
```

```{r}
library(semPlot)

semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.1)
```

```{=latex}
\begin{figure}[H]
\centering
\begin{tikzpicture}[>=stealth, node distance=2cm, on grid, auto]
  % Nodes
  \node[state] (ss) at (0,2) {Social\\Support};
  \node[state] (sk) at (0,5) {Social\\Skills};
  \node[state] (ge) at (3.5,3.5) {Goal-\\Efficacy};
  \node[state] (pl) at (7,3.5) {Planning};
  \node[state] (do) at (10.5,3.5) {Dropout\\Intention};
  \node[state] (gpa) at (7,1.3) {GPA};

  % Paths
  \path[->]
    (sk) edge node [sloped, above] {0.574} (ge)
    (ss) edge node [sloped, below] {0.262} (ge)
    (ge) edge node [above] {0.676} (pl)
    (sk) edge[bend left=15] node [above] {0.082} (pl)
    (ss) edge[bend right=15] node [below] {0.142} (pl)
    (gpa) edge node [right] {0.047} (pl)
    (pl) edge node [above] {-0.217} (do)
    (gpa) edge[bend left=20] node [below] {-0.082} (do);

\end{tikzpicture}
\caption{Standardized path model with goal-efficacy and planning predicting dropout intention.}
\end{figure}
```

# Demographic differences
```{r}
library(dplyr)
library(purrr)
library(tidyr)
library(broom)
library(effectsize)
library(stringr)

# Grouping variables of interest
group_vars <- c(
  "sexo", "estado_civil", "grupo_carrera", "region", "nse",
  "tipo_universidad", "ed_padre", "ed_madre"
)

# All numeric outcome variables
outcomes <- totales %>% select(where(is.numeric)) %>% select(-edad) %>% names()

# Function for pairwise comparisons
pairwise_comparisons <- function(group_var, outcome) {
  df <- totales %>% select(all_of(c(group_var, outcome))) %>% drop_na()
  df[[group_var]] <- as.factor(str_trim(df[[group_var]]))  # Ensure clean group names
  
  if (length(unique(df[[group_var]])) < 2) return(NULL)
  
  # Run ANOVA
  aov_model <- aov(reformulate(group_var, outcome), data = df)
  
  # Tukey HSD
  tukey <- TukeyHSD(aov_model)[[1]] %>%
    as.data.frame() %>%
    rownames_to_column("Comparison") %>%
    separate(Comparison, into = c("Group_1", "Group_2"), sep = "-", remove = FALSE) %>%
    rename(p = `p adj`)  # We'll leave this unadjusted for now
  
  # Get group stats
  group_stats <- df %>%
    group_by(.data[[group_var]]) %>%
    summarise(
      mean = mean(.data[[outcome]], na.rm = TRUE),
      n = n(),
      .groups = "drop"
    ) %>%
    rename(Group = 1, Mean = mean, N = n)
  
  # Merge means
  tukey <- tukey %>%
    left_join(group_stats, by = c("Group_1" = "Group")) %>%
    rename(Mean_1 = Mean, N_1 = N) %>%
    left_join(group_stats, by = c("Group_2" = "Group")) %>%
    rename(Mean_2 = Mean, N_2 = N)
  
  # Compute d separately with safe handling
  d_vals <- map2_dbl(tukey$Group_1, tukey$Group_2, function(g1, g2) {
    g1_data <- df %>% filter(.data[[group_var]] == g1) %>% pull(outcome)
    g2_data <- df %>% filter(.data[[group_var]] == g2) %>% pull(outcome)
    if (length(g1_data) > 1 && length(g2_data) > 1) {
      tryCatch(cohens_d(g1_data, g2_data, pooled = TRUE)$Cohens_d, error = function(e) NA)
    } else NA
  })
  
  # Final table
  tukey %>%
    mutate(
      Group_Variable = group_var,
      Outcome = outcome,
      d = round(d_vals, 3),
      Mean_1 = round(Mean_1, 3),
      Mean_2 = round(Mean_2, 3),
      N_1 = N_1,
      N_2 = N_2,
      p = round(p, 3)
    ) %>%
    select(Group_Variable, Outcome, Group_1, Group_2,
           Mean_1, Mean_2, N_1, N_2, d, p)
}

pairwise_results <- cross_df(list(group_var = group_vars, outcome = outcomes)) %>%
  pmap_dfr(~ pairwise_comparisons(..1, ..2))

# Apply p-value adjustment later
pairwise_results <- pairwise_results %>%
  mutate(p_bh = p.adjust(p, method = "bonferroni")) %>%
  arrange(p_bh)

# View results
pairwise_results %>% 
    as_tibble() %>% 
    filter(p_bh < .05) %>%
    ggplot(aes(Group_1, Group_2, fill = d)) + 
geom_tile() + 
facet_wrap(~Outcome)


```
```{r pairwise-tables, results = "asis"}

# Run it across all variables
library(gt)
library(dplyr)
library(purrr)

# Create a list of outcome-specific dataframes
results_split <- pairwise_results %>%
  arrange(Group_Variable) %>%
  group_by(Outcome) %>%
  mutate(Significant = ifelse(p_bh < 0.05, "Yes", "No")) %>%
  group_split()

# Output a gt table for each outcome with markdown heading
walk(results_split, function(df) {
  outcome_name <- unique(df$Outcome)
  cat("\n\n##", outcome_name, "\n\n")
  
  df %>%
    gt() %>%
    tab_style(
      style = cell_fill(color = "yellow"),
      locations = cells_body(
        columns = c(p_bh, Group_1, Group_2, d),
        rows = p < .05
      )
    ) %>%
    tab_style(
      style = cell_fill(color = "lightgreen"),
      locations = cells_body(
        columns = c(p_bh, Group_1, Group_2, d),
        rows = Significant == "Yes"
      )
    ) %>%
    print()
})
```

